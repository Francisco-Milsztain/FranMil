#include <Arduino.h>
#include <LiquidCrystal_I2C.h>
#include <Wire.h>

//Pantalla
LiquidCrystal_I2C lcd_1(0x27, 16, 2);

//MQ2
#define PIN_MQ2 33
int lec_MQ2;
float map_MQ2;

//Buzzer
#define PIN_BUZZER 32

//Balizas
#define PIN_BALIZAS 25

//Llave
#define PIN_LLAVE 26
int bloqLLAVE = 0;

//Lectura RaspberryPy
#define PIN_RASPY 34
int lec_raspy;

//Variables de tiempo
unsigned long timer;
unsigned long timer_tres_horas;
unsigned long cuentaregresivamillis;
unsigned long cuentaregresivasegundos;
unsigned long cuentaregresivaminutos;
unsigned long cuentaregresivahoras;

void setup()
{
  Serial.begin(115200);

  //Buzzer
  pinMode(PIN_BUZZER, OUTPUT);

  //Balizas
  pinMode(PIN_BALIZAS, OUTPUT);

  //Llaves
  pinMode(PIN_LLAVE, OUTPUT); //(Tiene lógica inversa)

  //Pantalla
  lcd_1.init();
  lcd_1.backlight();

  lcd_1.setCursor(0, 0);
  lcd_1.print("Sople en el");
  lcd_1.setCursor(0, 1);
  lcd_1.print("alcoholimetro");
}

void loop()
{
  timer = millis();
  cuentaregresivamillis = timer_tres_horas - timer;
  cuentaregresivasegundos = cuentaregresivamillis / 1000;
  cuentaregresivaminutos = cuentaregresivasegundos / 60;
  cuentaregresivahoras = cuentaregresivaminutos / 60;


  //Sensor de gas MQ2
  lec_MQ2 = analogRead(PIN_MQ2);
  map_MQ2 = map(lec_MQ2, 0, 4095, 0, 100);

  if (map_MQ2 > 40 && bloqLLAVE == 0) //Si la lectura de gas en el aire supera X%
  {
    digitalWrite(PIN_LLAVE, HIGH); //Se bloquea la llave del auto
    lcd_1.clear();
    lcd_1.setCursor(0, 0);
    lcd_1.print("Se detecto");
    lcd_1.setCursor(0, 1);
    lcd_1.print("intoxizacion");
    bloqLLAVE = 1;
  }

  if (map_MQ2 < 40 && bloqLLAVE == 1) //Si la lectura de gas en el aire NO supera X%
  {
    digitalWrite(PIN_LLAVE, LOW); //Se desbloquea la llave del auto
    lcd_1.clear();
    timer_tres_horas = timer + 10800000 //Se suman 3 horas a la cuenta
    bloqLLAVE = 0;
  }
  if (map_MQ2 < 40 && bloqLLAVE == 0) //Si la lectura de gas en el aire NO supera X%
  {
    lcd_1.setCursor(0, 0);
    lcd_1.print("Sople en:");

    lcd_1.setCursor(0, 1);
    lcd_1.print(cuentaregresivahoras);
    lcd_1.setCursor(3, 1):
    lcd_1.print(cuentaregresivaminutos);
    lcd_1.setCursor(7, 1):
    lcd_1.print(cuentaregresivasegundos);
  }

  if (timer > timer_tres_horas) //Si pasan 3 horas
  {
    //Se prende y apaga el buzzer, y la pantalla exige que se vuelva a soplar
    timer_tres_horas = timer + 10800000; //ESTO NO VA ACA, PASA SOLO DESPUES DE QUE LA PERSONA SOPLA.
  }

  //Se lee el pin del RaspberryPy (buzzer y balizas)
  lec_raspy = digitalRead(PIN_RASPY);

  if (lec_raspy == 1) //Si se detecta que el RaspberryPy manda una señal al ESP32
  {
    digitalWrite(PIN_BUZZER, HIGH); //Se prende el buzzer
    digitalWrite(PIN_BALIZAS, HIGH); //Se prenden las balizas
  }
  if (lec_raspy == 0) //Sino
  {
    digitalWrite(PIN_BUZZER, LOW); //Se apaga el buzzer
    digitalWrite(PIN_BALIZAS, LOW); //Se apagan las balizas
  }
}
