frontend: una app que tiene interfaz de usuario. backend: una app que no tiene interfaz de usuario.
hay bases de datos (db) locales, guardadas adentro del dispositivo, ej: memoria del teléfono.
hay bases de datos que están en la nube, guardadas fuera del dispositivo.

la ventaja de la db local es que no necesita internet.
la ventaja de la base de datos de la nube, es que yo puedo consumir esta desde varios dispositivos, permitiendo que la información se comparta.
la nube es un servidor (una computadora).

para conectar un dispositivo (frontend) a la nube, se requiere un backend como intermediario (el backend ES la base de datos).
el backend maneja la db, la autenticacion, los archivos/datos, y a veces la business logic.

la business logic maneja la logica de negocio, permite que los usuarios hagan lo que el negocio quiere (esta logica puede estar en el frontend tamibien).

la api es la interfaz de programación entre las dos partes (conecta el frontend con el backend //// tambien puede concetar backend con backend).
EL BACKEND SIEMPRE ESTÁ, NO SIEMPRE LO HACES VOS.

DATABASES:

se clasifiacban en: relacionales y no relacionales (esta clasificacion es una mierda dice ale)
las relacionales permiten que se relacionen los objetos a traves de atributos.
la clasificacion está mal, porque las relaciones entre actores siempre existen, sin importar si hay base de datos o no.

LAS BASES DE DATOS REALMENTE SE DIVIDEN EN *SQL (structure query language)* Y EN *NO SQL*
las sql tienen relaciones fuertes o de dependencia entre actores. en las no sql no pasa esto.
en una base estructurada (sql) todos los usuarios(elementos) tienen la misma forma o atributos. en una tabla, todos tienen la misma estructura.
en una no estructurada (no sql), cada usuario puede tener atributos distintos, tiene forma de árbol con ramificaciones en vez de ser una tabla.

VENTAJAS DE LA NO SQL: flexible, admite muchos tipos de datos, 
Ventajas de la sql: la query es la instruccion de busqueda dentro de una base de datos, y es mucho más facil usarlo en una sql que en una no sql.

firebase es no sql.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

firestore database (1), authentication (2), storage (3)

(1) una coleccion tiene documentos, cada documento representa una "entidad", esta entidad despues tiene sus datos o atributos propios.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

el notifier del provider ya no es el estado de una variable, sino que es una funcion para cambiar el estado.
movie_app_firebase en el github de ale.

class Movie tiene los métodos de toFirestore y fromFirestore
en a pantalla se usa consumerstatefulwidget (xq se usa riverpod)

ahora el notifier llama (en el init state) a un metodo con ref.read(movieProvider.notifier).[METODO](); (metodo = funcion)
en el provider (movieProvider) cambia mucho. antes se usaba stateprovider, ahora es statenotifierprovider (extends StateNotifier), porque ahora el notifier lo defino yo en vez de ser el normal

el movieNotifier es una class, donde se pueden guardar las funciones que van a ser usadas para cambiar el estado. el notifier puede ser de tipo list, por lo que esta list se modifica con los métodos

ANTES DE LA FUNCIONES SE HACE

final FirebaseFirestore db;

MoviesNotifier(this.db) : super{[]};

FUNCION 2 (la 1 despues la explica):
funcion getAllMovies, modifica la lista (el estado), no devuelve nada. future = promesa. 

Future<void> getAllMovies() async 
{
  //se iguala docsa a db.collection('movies') bla bla 
  //esta funcion basicamente recibe datos desde firebase y los convierte a objetos
}

https://github.com/adbrepo/curso_flutter


|-----------|
| NOTAS 7.5 |
|-----------|

ahora hay que conectar la app con firebase (a modo general).
configurar la app para conectarse a un proyecto de firebase.
despues de esto se crea la base de datos y se puede empezar a usar.

COMO CONECTAR APP AL PROYECTO:
agregar app (desde firebase) --> flutter --> seguir los pasos --> checkear si se agregó "firebase_options.dart"

en main hay que agregar el codigo que dice inicializa firebase (va antes de runApp)

WidgetsFlutterBinding.ensureInitializaed();
await bla bla [se copia y pega]

hay que instalar la libreria firebase_core y  cloud_firestore (a veces se agrega solo)

en el provider se hacen 2 funciones (una recibe otra envia)

.doc() es una funcion que crea un documento nuevo
AMBAS FUNCIONENS NECESITAN TRY CATCH. 
El codigo de ejemplo esta en adbrepo "movie_app_firebase"
